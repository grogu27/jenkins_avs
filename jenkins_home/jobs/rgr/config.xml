<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1472.ve4d5eca_143c4">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2218.v56d0cda_37c72"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2218.v56d0cda_37c72">
      <jobProperties/>
      <triggers>
        <string>hudson.triggers.SCMTrigger</string>
      </triggers>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>В jenkins создан пайплайн/задача/таск, работающий с репозиторием gitlab/github&#xd;
При изменении в репозитории автоматически запускается задача обновления docker-контейнера с содержимым репозитория (Либо сборка образа с новым приложением и обновление контейнера)</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.SCMTrigger>
          <spec>*/10 * * * *</spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@4002.v80ca_d0f47d7f">
    <script>pipeline {
    agent any

    environment {
        DOCKER_IMAGE = &apos;jenkins_avs-jenkins:latest&apos;
        DOCKER_CONTAINER_NAME = &apos;jenkins&apos;
        DOCKER_PORT = &apos;80:80&apos;
    }

    stages {
        stage(&apos;Checkout&apos;) {
            steps {
                git branch: &apos;main&apos;, url: &apos;https://github.com/grogu27/jenkins_avs&apos;
            }
        }

        stage(&apos;Build Docker Image&apos;) {
            steps {
                script {
                    // Сборка Docker-образа
                    sh &apos;docker build -t ${DOCKER_IMAGE} .&apos;
                }
            }
        }

        stage(&apos;Deploy&apos;) {
            steps {
                script {
                    // Остановка и удаление старого контейнера, если он существует
                    sh &apos;&apos;&apos;
                        if docker ps -a --filter &quot;name=${DOCKER_CONTAINER_NAME}&quot; -q; then
                            echo &quot;Stopping and removing existing container...&quot;
                            docker stop ${DOCKER_CONTAINER_NAME}
                            docker rm ${DOCKER_CONTAINER_NAME}
                        else
                            echo &quot;No existing container found, skipping stop and remove.&quot;
                        fi
                    &apos;&apos;&apos;
                    // Запуск нового контейнера
                    sh &quot;docker run -d --name ${DOCKER_CONTAINER_NAME} -p ${DOCKER_PORT} ${DOCKER_IMAGE}&quot;
                }
            }
        }
    }
    triggers {
        pollSCM(&apos;H/5  * * * *&apos;)  // Проверка изменений каждые 10 минут
    }
    post {
        always {
            echo &apos;Pipeline finished&apos;
        }
        success {
            echo &apos;:)&apos;
        }
        failure {
            echo &apos;:(&apos;
        }
    }
}
</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>