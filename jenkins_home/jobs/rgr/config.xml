<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1472.ve4d5eca_143c4">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2218.v56d0cda_37c72"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2218.v56d0cda_37c72">
      <jobProperties/>
      <triggers>
        <string>hudson.triggers.SCMTrigger</string>
      </triggers>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>В jenkins создан пайплайн/задача/таск, работающий с репозиторием gitlab/github&#xd;
При изменении в репозитории автоматически запускается задача обновления docker-контейнера с содержимым репозитория (Либо сборка образа с новым приложением и обновление контейнера)</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.SCMTrigger>
          <spec>*/10 * * * *</spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@4002.v80ca_d0f47d7f">
    <script>pipeline {
    agent any
    stages {
        stage(&apos;Checkout&apos;) {
            steps {
                git branch: &apos;main&apos;, url: &apos;https://github.com/grogu27/jenkins_avs.git&apos;
            }
        }
        stage(&apos;Build Docker Image&apos;) {
            steps {
                script {
                    // Удаление старого образа my-image
                    sh &apos;docker rmi -f my-image:latest || true&apos;

                    // Сборка Docker образа
                    echo &apos;Building Docker image...&apos;
                    sh &apos;docker build -t my-image:latest .&apos;  // Сборка образа с тегом &apos;my-image&apos;
                }
            }
        }
        stage(&apos;Build and Deploy with Docker Compose&apos;) {
            steps {
                script {
                    // Перейдем в каталог, где расположен docker-compose.yml
                    dir(&apos;.&apos;) {
                        // Удаление старого контейнера docker-dind
                        sh &apos;docker rm -f docker-dind || true&apos;

                        // Остановка и удаление всех контейнеров, связанных с текущим проектом
                        sh &apos;docker compose -f docker-compose.yml down --remove-orphans || true&apos;

                        // Запуск сборки и деплоя с помощью docker-compose
                        sh &quot;docker compose -f docker-compose.yml up -d --build --remove-orphans&quot;
                    }
                }
            }
        }
        stage(&apos;Cleanup&apos;) {
            steps {
                script {
                    // Удаление неиспользуемых образов
                    sh &apos;docker image prune -f&apos;
                }
            }
        }
    }
    triggers {
        pollSCM(&apos;*/10 * * * *&apos;)  // Проверка изменений каждые 10 минут
    }
    post {
        always {
            echo &apos;Pipeline finished&apos;
        }
        success {
            echo &apos;:)&apos;
        }
        failure {
            echo &apos;:(&apos;
        }
    }
}
</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>